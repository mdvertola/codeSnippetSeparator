cyverse_repos/docker-builds/Read2RefMapper/scripts/Read2ReferenceMapper.py,subprocess_popen_with_shell_equals_true,def execute(command logfile):logfile.write('Executing {}'.format(command))process = subprocess.Popen(command stdin=subprocess.PIPE stdout=subprocess.PIPE stderr=subprocess.PIPE shell=True)(stdout stderr) = process.communicate()return stdout stderr23905968,<python>,if cmd: proc = subprocess.Popen(cmd stdout=subprocess.PIPE stderr=subprocess.PIPE shell=True) result = proc.communicate()[0] print result,1
cyverse_repos/docker-builds/Read2RefMapper/scripts/Read2ReferenceMapper.py,subprocess_popen_with_shell_equals_true,def execute(command logfile):logfile.write('Executing {}'.format(command))process = subprocess.Popen(command stdin=subprocess.PIPE stdout=subprocess.PIPE stderr=subprocess.PIPE shell=True)(stdout stderr) = process.communicate()return stdout stderr23905968,<python><python-2.7><subprocess>,&gt; p = subprocess.Popen(args shell=True)p = subprocess.Popen(args stdout=subprocess.PIPE shell=True) (stdout stderr) = p.communicate() with file('response.xml' 'w') as fp: fp.write(stdout),1
cyverse_repos/docker-builds/Read2RefMapper/scripts/Read2ReferenceMapper.py,subprocess_popen_with_shell_equals_true,def execute(command logfile):logfile.write('Executing {}'.format(command))process = subprocess.Popen(command stdin=subprocess.PIPE stdout=subprocess.PIPE stderr=subprocess.PIPE shell=True)(stdout stderr) = process.communicate()return stdout stderr57334246,<python><pyinstaller>,proc = subprocess.Popen(conn stdout=subprocess.PIPE stderr=subprocess.PIPE stdin=subprocess.DEVNULL shell=True) stdout stderr = proc.communicate() print(stdout + stderr),1
cyverse_repos/beats/libbeat/tests/system/test_dashboard.py,assert_used,print(command)p = subprocess.Popen(command shell=True stdout=subprocess.PIPE stderr=subprocess.PIPE)content err = p.communicate()assert p.returncode == 0files = os.listdir(path)for f in files:self.assertIsNone(re.search('[:\>\</\\\|\?\*]' f))18136651,<python>,"proc = subprocess.Popen(""ls -z"" shell=True stdout=subprocess.PIPE stderr=subprocess.PIPE) out err = proc.communicate() assert proc.returncode == 0 'i am sad' print out print err",1
cyverse_repos/cyverse-irods/packaging/generate_version_json.py,start_process_with_partial_path,# get build_system_informationunameinfo = platform.uname()outdata['build_system_information'] = ' '.join(unameinfo).strip()# get compile_timep = subprocess.Popen('date -u +%Y-%m-%dT%H:%M:%SZ' stdout=subprocess.PIPE stderr=subprocess.PIPE shell=True)(compile_time err) = p.communicate()outdata['compile_time'] = compile_time.strip().decode('ascii')# get compiler_version12937063,<python>,{ subprocess import subprocess p = subprocess.Popen(['dir']stdout=subprocess.PIPE stderr=subprocess.PIPE shell=True) stdoutstderr = p.communicate()shell=True ,0
cyverse_repos/cyverse-irods/packaging/generate_version_json.py,start_process_with_partial_path,# get build_system_informationunameinfo = platform.uname()outdata['build_system_information'] = ' '.join(unameinfo).strip()# get compile_timep = subprocess.Popen('date -u +%Y-%m-%dT%H:%M:%SZ' stdout=subprocess.PIPE stderr=subprocess.PIPE shell=True)(compile_time err) = p.communicate()outdata['compile_time'] = compile_time.strip().decode('ascii')# get compiler_version23191228,<python>,if cmd: proc = subprocess.Popen(cmd stdout=subprocess.PIPE stderr=subprocess.PIPE shell=True) result = proc.communicate()[0] print result,0
cyverse_repos/irods/packaging/generate_version_json.py,start_process_with_partial_path,# get build_system_informationunameinfo = platform.uname()outdata['build_system_information'] = ' '.join(unameinfo).strip()# get compile_timep = subprocess.Popen('date -u +%Y-%m-%dT%H:%M:%SZ' stdout=subprocess.PIPE stderr=subprocess.PIPE shell=True)(compile_time err) = p.communicate()outdata['compile_time'] = compile_time.strip().decode('ascii')# get compiler_version23191228,<python>,if cmd: proc = subprocess.Popen(cmd stdout=subprocess.PIPE stderr=subprocess.PIPE shell=True) result = proc.communicate()[0] print result,0
cyverse_repos/cyverse-irods/packaging/generate_version_json.py,start_process_with_partial_path,# get build_system_informationunameinfo = platform.uname()outdata['build_system_information'] = ' '.join(unameinfo).strip()# get compile_timep = subprocess.Popen('date -u +%Y-%m-%dT%H:%M:%SZ' stdout=subprocess.PIPE stderr=subprocess.PIPE shell=True)(compile_time err) = p.communicate()outdata['compile_time'] = compile_time.strip().decode('ascii')# get compiler_version23191228,<python>,if cmd: proc = subprocess.Popen(cmd stdout=subprocess.PIPE stderr=subprocess.PIPE shell=True) result = proc.communicate()[0] print result,0
cyverse_repos/irods/packaging/generate_version_json.py,start_process_with_partial_path,# get build_system_informationunameinfo = platform.uname()outdata['build_system_information'] = ' '.join(unameinfo).strip()# get compile_timep = subprocess.Popen('date -u +%Y-%m-%dT%H:%M:%SZ' stdout=subprocess.PIPE stderr=subprocess.PIPE shell=True)(compile_time err) = p.communicate()outdata['compile_time'] = compile_time.strip().decode('ascii')# get compiler_version23191228,<python>,if cmd: proc = subprocess.Popen(cmd stdout=subprocess.PIPE stderr=subprocess.PIPE shell=True) result = proc.communicate()[0] print result,0
cyverse_repos/docker-builds/Read2RefMapper/scripts/Read2ReferenceMapper.py,subprocess_popen_with_shell_equals_true,def execute(command logfile):logfile.write('Executing {}'.format(command))process = subprocess.Popen(command stdin=subprocess.PIPE stdout=subprocess.PIPE stderr=subprocess.PIPE shell=True)(stdout stderr) = process.communicate()return stdout stderr23414428,<python><shell><solaris><popen>,"shell=True p = subprocess.Popen(""ls -l""shell=Truestdout=subprocess.PIPE)shell=True ",0
cyverse_repos/docker-builds/Read2RefMapper/scripts/Read2ReferenceMapper.py,subprocess_popen_with_shell_equals_true,def execute(command logfile):logfile.write('Executing {}'.format(command))process = subprocess.Popen(command stdin=subprocess.PIPE stdout=subprocess.PIPE stderr=subprocess.PIPE shell=True)(stdout stderr) = process.communicate()return stdout stderr23420265,<python><linux><subprocess>,"grepOut = subprocess.check_output(""grep 'hello' tmp"" shell=True)grepOut = subprocess.check_output(['grep' ""'hello'"" 'tmp'])",0
cyverse_repos/docker-builds/Read2RefMapper/scripts/Read2ReferenceMapper.py,subprocess_popen_with_shell_equals_true,def execute(command logfile):logfile.write('Executing {}'.format(command))process = subprocess.Popen(command stdin=subprocess.PIPE stdout=subprocess.PIPE stderr=subprocess.PIPE shell=True)(stdout stderr) = process.communicate()return stdout stderr2352870,<python><web.py>,from subprocess import Popen PIPE proc = Popen('ls' shell=True stdout=PIPE) proc.wait() proc.communicate(),0
cyverse_repos/docker-builds/Read2RefMapper/scripts/Read2ReferenceMapper.py,subprocess_popen_with_shell_equals_true,def execute(command logfile):logfile.write('Executing {}'.format(command))process = subprocess.Popen(command stdin=subprocess.PIPE stdout=subprocess.PIPE stderr=subprocess.PIPE shell=True)(stdout stderr) = process.communicate()return stdout stderr23984014,<python>,"import subprocess subprocess.call(""java -jar xyz.jar"" shell=True stdout=open('outfile.txt' 'wt') stderr=subprocess.STDOUT)shell=True ",0
cyverse_repos/docker-builds/Read2RefMapper/scripts/Read2ReferenceMapper.py,subprocess_popen_with_shell_equals_true,def execute(command logfile):logfile.write('Executing {}'.format(command))process = subprocess.Popen(command stdin=subprocess.PIPE stdout=subprocess.PIPE stderr=subprocess.PIPE shell=True)(stdout stderr) = process.communicate()return stdout stderr24040256,<python><subprocess>,"shlex import shlexstr1 = ""./program.sh %lf %lf"" % (x0 x1) sim_flux230 = subprocess.check_output(shlex.split(str1))shell=True subprocess.check_output(str1 shell=True) shell=True ",0
cyverse_repos/docker-builds/Read2RefMapper/scripts/Read2ReferenceMapper.py,subprocess_popen_with_shell_equals_true,def execute(command logfile):logfile.write('Executing {}'.format(command))process = subprocess.Popen(command stdin=subprocess.PIPE stdout=subprocess.PIPE stderr=subprocess.PIPE shell=True)(stdout stderr) = process.communicate()return stdout stderr24207052,<php><python><python-2.7>,"Popen cmd = [""php"" ""./sync.php""] proc = subprocess.Popen(cmd shell=True stdout=subprocess.PIPE)args cwd ",0
cyverse_repos/docker-builds/Read2RefMapper/scripts/Read2ReferenceMapper.py,subprocess_popen_with_shell_equals_true,def execute(command logfile):logfile.write('Executing {}'.format(command))process = subprocess.Popen(command stdin=subprocess.PIPE stdout=subprocess.PIPE stderr=subprocess.PIPE shell=True)(stdout stderr) = process.communicate()return stdout stderr24340877,<python><bash><subprocess><bitcoin>,process = subprocess.Popen(['bitcoin' 'getinfo'] stdout=subprocess.PIPE)shell True process = subprocess.Popen('bitcoin getinfo' stdout=subprocess.PIPE shell=True),0
cyverse_repos/docker-builds/Read2RefMapper/scripts/Read2ReferenceMapper.py,subprocess_popen_with_shell_equals_true,def execute(command logfile):logfile.write('Executing {}'.format(command))process = subprocess.Popen(command stdin=subprocess.PIPE stdout=subprocess.PIPE stderr=subprocess.PIPE shell=True)(stdout stderr) = process.communicate()return stdout stderr24464136,<python><logging><subprocess><vlc>,proc = subprocess.Popen(cmd1 stderr=out shell=True preexec_fn=os.setsid),0
cyverse_repos/docker-builds/Read2RefMapper/scripts/Read2ReferenceMapper.py,subprocess_popen_with_shell_equals_true,def execute(command logfile):logfile.write('Executing {}'.format(command))process = subprocess.Popen(command stdin=subprocess.PIPE stdout=subprocess.PIPE stderr=subprocess.PIPE shell=True)(stdout stderr) = process.communicate()return stdout stderr2449250,<python><redirect><terminal><ffmpeg>,"os.system subprocess.Popen import subprocess proc=subprocess.Popen('echo ""to stdout""' shell=True stdout=subprocess.PIPE ) output=proc.communicate()[0] print output",0
cyverse_repos/docker-builds/Read2RefMapper/scripts/Read2ReferenceMapper.py,subprocess_popen_with_shell_equals_true,def execute(command logfile):logfile.write('Executing {}'.format(command))process = subprocess.Popen(command stdin=subprocess.PIPE stdout=subprocess.PIPE stderr=subprocess.PIPE shell=True)(stdout stderr) = process.communicate()return stdout stderr58318250,<python><subprocess><output>,subprocess.run Popen output = subprocess.run([filePath arguments] stdout=subprocess.PIPE) output.stdout.decode('utf-8')shell=True ,0
cyverse_repos/docker-builds/Read2RefMapper/scripts/Read2ReferenceMapper.py,subprocess_popen_with_shell_equals_true,def execute(command logfile):logfile.write('Executing {}'.format(command))process = subprocess.Popen(command stdin=subprocess.PIPE stdout=subprocess.PIPE stderr=subprocess.PIPE shell=True)(stdout stderr) = process.communicate()return stdout stderr58490470,<python><python-3.x><apache-spark><hdfs>,"shell=True subprocess.call subprocess.call(""hdfs dfs -copyFromLocal concsessions.csv /user/username/spark_exports/"" shell=True)",0
cyverse_repos/docker-builds/Read2RefMapper/scripts/Read2ReferenceMapper.py,subprocess_popen_with_shell_equals_true,def execute(command logfile):logfile.write('Executing {}'.format(command))process = subprocess.Popen(command stdin=subprocess.PIPE stdout=subprocess.PIPE stderr=subprocess.PIPE shell=True)(stdout stderr) = process.communicate()return stdout stderr58521856,<python>,"subprocess.check_output shell=True import subprocessprint(subprocess.check_output([""df -g | grep -w /""] shell=True).split()[2]).split() [2] ",0
cyverse_repos/docker-builds/Read2RefMapper/scripts/Read2ReferenceMapper.py,subprocess_popen_with_shell_equals_true,def execute(command logfile):logfile.write('Executing {}'.format(command))process = subprocess.Popen(command stdin=subprocess.PIPE stdout=subprocess.PIPE stderr=subprocess.PIPE shell=True)(stdout stderr) = process.communicate()return stdout stderr58963834,<python><django>,ps result = subprocess.run(['ps aux | grep rssrun'] capture_output=True shell=True) print(result.stdout),0
cyverse_repos/atmosphere/api/status/views/celery.py,start_process_with_partial_path,def _is_celery_running():Verify whether or not celery workers are runningreturn True/Falseps = subprocess.Popen(['ps' 'aux'] stdout=subprocess.PIPE)try:output = subprocess.check_output(['grep' '[c]elery worker'] stdin=ps.stdout)return output is not 41273979,<python><subprocess>,ps = subprocess.Popen(('ps' 'aux') stdout=subprocess.PIPE) output = subprocess.check_output(('grep' 'python') stdin=ps.stdout) ps.wait()print output,1
cyverse_repos/docker-builds/bowtiebatch/1.0/scripts/bowtie_batch.py,subprocess_popen_with_shell_equals_true,def execute(command logfile):logfile.write('Executing {}'.format(command) + os.linesep)process = subprocess.Popen(command stdin=subprocess.PIPE stdout=subprocess.PIPE stderr=subprocess.PIPE shell=True)(stdout stderr) = process.communicate()logfile.write(stderr + os.linesep)23191228,<python>,if cmd: proc = subprocess.Popen(cmd stdout=subprocess.PIPE stderr=subprocess.PIPE shell=True) result = proc.communicate()[0] print result,1
cyverse_repos/docker-builds/bowtiebatch/1.0/scripts/bowtie_batch.py,subprocess_popen_with_shell_equals_true,def execute(command logfile):logfile.write('Executing {}'.format(command) + os.linesep)process = subprocess.Popen(command stdin=subprocess.PIPE stdout=subprocess.PIPE stderr=subprocess.PIPE shell=True)(stdout stderr) = process.communicate()logfile.write(stderr + os.linesep)57334246,<python><pyinstaller>,proc = subprocess.Popen(conn stdout=subprocess.PIPE stderr=subprocess.PIPE stdin=subprocess.DEVNULL shell=True) stdout stderr = proc.communicate() print(stdout + stderr),1
cyverse_repos/docker-builds/Read2RefMapper/scripts/Read2ReferenceMapper.py,subprocess_popen_with_shell_equals_true,def execute(command logfile):logfile.write('Executing {}'.format(command))process = subprocess.Popen(command stdin=subprocess.PIPE stdout=subprocess.PIPE stderr=subprocess.PIPE shell=True)(stdout stderr) = process.communicate()return stdout stderr12937063,<python>,{ subprocess import subprocess p = subprocess.Popen(['dir']stdout=subprocess.PIPE stderr=subprocess.PIPE shell=True) stdoutstderr = p.communicate()shell=True ,1
cyverse_repos/docker-builds/Read2RefMapper/scripts/Read2ReferenceMapper.py,subprocess_popen_with_shell_equals_true,def execute(command logfile):logfile.write('Executing {}'.format(command))process = subprocess.Popen(command stdin=subprocess.PIPE stdout=subprocess.PIPE stderr=subprocess.PIPE shell=True)(stdout stderr) = process.communicate()return stdout stderr13398261,<python><subprocess>,shell=True process = subprocess.Popen(cmd shell=Truestdout=subprocess.PIPE stderr=subprocess.PIPE)# wait for the process to terminate out err = process.communicate() errcode = process.returncode,1
cyverse_repos/docker-builds/Read2RefMapper/scripts/Read2ReferenceMapper.py,subprocess_popen_with_shell_equals_true,def execute(command logfile):logfile.write('Executing {}'.format(command))process = subprocess.Popen(command stdin=subprocess.PIPE stdout=subprocess.PIPE stderr=subprocess.PIPE shell=True)(stdout stderr) = process.communicate()return stdout stderr14438845,<python><subprocess>,def run_command(command): p = subprocess.Popen(command shell=True stdout=subprocess.PIPE stderr=subprocess.STDOUT) return p.communicate(),1
cyverse_repos/docker-builds/Read2RefMapper/scripts/Read2ReferenceMapper.py,subprocess_popen_with_shell_equals_true,def execute(command logfile):logfile.write('Executing {}'.format(command))process = subprocess.Popen(command stdin=subprocess.PIPE stdout=subprocess.PIPE stderr=subprocess.PIPE shell=True)(stdout stderr) = process.communicate()return stdout stderr1499811,<php><python><svn>,"svnversion svnversion import subprocessdef svnversion(): p = subprocess.Popen(""svnversion"" stdout=subprocess.PIPE stderr=subprocess.PIPE) (stdout stderr) = p.communicate() return stdout",1
cyverse_repos/docker-builds/Read2RefMapper/scripts/Read2ReferenceMapper.py,subprocess_popen_with_shell_equals_true,def execute(command logfile):logfile.write('Executing {}'.format(command))process = subprocess.Popen(command stdin=subprocess.PIPE stdout=subprocess.PIPE stderr=subprocess.PIPE shell=True)(stdout stderr) = process.communicate()return stdout stderr21969515,<python><windows><python-2.7><numpy><terminal>,"stdout=subprocess.PIPE cmd = subprocess.Popen(""python GetAlexRanking.py "" + row stdout=subprocess.PIPEstderr=subprocess.PIPEshell=True) (output err) = cmd.communicate()",1
cyverse_repos/docker-builds/Read2RefMapper/scripts/Read2ReferenceMapper.py,subprocess_popen_with_shell_equals_true,def execute(command logfile):logfile.write('Executing {}'.format(command))process = subprocess.Popen(command stdin=subprocess.PIPE stdout=subprocess.PIPE stderr=subprocess.PIPE shell=True)(stdout stderr) = process.communicate()return stdout stderr25523361,<python><bash><exception><error-handling>,stderr stderr=subprocess.STDOUT proc = subprocess.Popen(... stdout=subprocess.PIPE stderr=subprocess.PIPE) stdout stderr = proc.communicate()check_output ,1
cyverse_repos/docker-builds/Read2RefMapper/scripts/Read2ReferenceMapper.py,subprocess_popen_with_shell_equals_true,def execute(command logfile):logfile.write('Executing {}'.format(command))process = subprocess.Popen(command stdin=subprocess.PIPE stdout=subprocess.PIPE stderr=subprocess.PIPE shell=True)(stdout stderr) = process.communicate()return stdout stderr26694464,<python><windows><subprocess><popen>,C:\&gt; subprocess.call([program file])p = subprocess.Popen([program file] stdout=subprocess.PIPE stderr=subprocess.PIPE) stdout stderr = p.communicate() print stdout,1
cyverse_repos/docker-builds/Read2RefMapper/scripts/Read2ReferenceMapper.py,subprocess_popen_with_shell_equals_true,def execute(command logfile):logfile.write('Executing {}'.format(command))process = subprocess.Popen(command stdin=subprocess.PIPE stdout=subprocess.PIPE stderr=subprocess.PIPE shell=True)(stdout stderr) = process.communicate()return stdout stderr49543605,<python><subprocess>,"fdisk command = ['sudo' 'fdisk' '/dev/xvdm'] p = subprocess.Popen(command stdin=subprocess.PIPEstdout=subprocess.PIPEstderr=subprocess.PIPE) output err = p.communicate(b""o\nn\np\n1\n\n\nw"")",1
cyverse_repos/docker-builds/Read2RefMapper/scripts/Read2ReferenceMapper.py,subprocess_popen_with_shell_equals_true,def execute(command logfile):logfile.write('Executing {}'.format(command))process = subprocess.Popen(command stdin=subprocess.PIPE stdout=subprocess.PIPE stderr=subprocess.PIPE shell=True)(stdout stderr) = process.communicate()return stdout stderr57334246,<python><pyinstaller>,proc = subprocess.Popen(conn stdout=subprocess.PIPE stderr=subprocess.PIPE stdin=subprocess.DEVNULL shell=True) stdout stderr = proc.communicate() print(stdout + stderr),1
cyverse_repos/docker-builds/Read2RefMapper/scripts/Read2ReferenceMapper.py,subprocess_popen_with_shell_equals_true,def execute(command logfile):logfile.write('Executing {}'.format(command))process = subprocess.Popen(command stdin=subprocess.PIPE stdout=subprocess.PIPE stderr=subprocess.PIPE shell=True)(stdout stderr) = process.communicate()return stdout stderr6657690,<python><shell><command><subprocess>,import subprocess process = subprocess.Popen(['ls' '-a'] stdout=subprocess.PIPE stderr=subprocess.PIPE) out err = process.communicate() print(out),1
cyverse_repos/ansible/lib/ansible/plugins/connection/local.py,subprocess_popen_with_shell_equals_true,else:cmd = map(to_bytes cmd)p = subprocess.Popen(cmdshell=isinstance(cmd (text_type binary_type))executable=executable #cwd=...stdin=subprocess.PIPEstdout=subprocess.PIPEstderr=subprocess.PIPE)11165129,<python><shell><subprocess>,"shell = subprocess.Popen(""/bin/bash -i"".split() stdin=subprocess.PIPEstdout=subprocess.PIPE stderr=subprocess.PIPE)pexpect ",1
cyverse_repos/ansible/lib/ansible/plugins/connection/local.py,subprocess_popen_with_shell_equals_true,else:cmd = map(to_bytes cmd)p = subprocess.Popen(cmdshell=isinstance(cmd (text_type binary_type))executable=executable #cwd=...stdin=subprocess.PIPEstdout=subprocess.PIPEstderr=subprocess.PIPE)16837642,<python><shell><logging><subprocess><communicate>,shell=True log = subprocess.Popen(mycmd stdin = subprocess.PIPE stdout = subprocess.PIPEstderr = subprocess.PIPE),1
cyverse_repos/ansible/lib/ansible/plugins/connection/local.py,subprocess_popen_with_shell_equals_true,else:cmd = map(to_bytes cmd)p = subprocess.Popen(cmdshell=isinstance(cmd (text_type binary_type))executable=executable #cwd=...stdin=subprocess.PIPEstdout=subprocess.PIPEstderr=subprocess.PIPE)35460132,<python><linux><url><web><debian>,"File ""pianobar_web.py"" line 67 in authenticate proc = subprocess.Popen(""pianobar"" stdin=subprocess.PIPE stdout=subprocess.PIPE stderr=subprocess.PIPE)",1
cyverse_repos/ansible/lib/ansible/plugins/connection/jail.py,subprocess_without_shell_equals_true,if not cmd:raise AnsibleError(%s command not found in PATH % executable)return cmddef list_jails(self):p = subprocess.Popen([self.jls_cmd '-q' 'name'] stdin=subprocess.PIPE stdout=subprocess.PIPE stderr=subprocess.PIPE)stdout stderr = p.communicate()19884168,<python><command-line><bc>,"p = subprocess.Popen(""bc"" stdin=subprocess.PIPE stdout=subprocess.PIPE stderr=subprocess.PIPE) out err = p.communicate('1+1\n')",1
cyverse_repos/ansible/lib/ansible/plugins/connection/jail.py,subprocess_without_shell_equals_true,if not cmd:raise AnsibleError(%s command not found in PATH % executable)return cmddef list_jails(self):p = subprocess.Popen([self.jls_cmd '-q' 'name'] stdin=subprocess.PIPE stdout=subprocess.PIPE stderr=subprocess.PIPE)stdout stderr = p.communicate()42452033,<python><bash><subprocess><stdin><biopython>,muscle (out err) = subprocess.Popen(['muscle'] stdin=subprocess.PIPE stdout=subprocess.PIPE stderr=subprocess.PIPE).communicate(temp_align) print out,1
cyverse_repos/ansible/lib/ansible/plugins/connection/jail.py,subprocess_without_shell_equals_true,if not cmd:raise AnsibleError(%s command not found in PATH % executable)return cmddef list_jails(self):p = subprocess.Popen([self.jls_cmd '-q' 'name'] stdin=subprocess.PIPE stdout=subprocess.PIPE stderr=subprocess.PIPE)stdout stderr = p.communicate()6657690,<python><shell><command><subprocess>,import subprocess process = subprocess.Popen(['ls' '-a'] stdout=subprocess.PIPE stderr=subprocess.PIPE) out err = process.communicate() print(out),1
cyverse_repos/beats/libbeat/tests/system/test_dashboard.py,assert_used,print(command)p = subprocess.Popen(command shell=True stdout=subprocess.PIPE stderr=subprocess.PIPE)content err = p.communicate()assert p.returncode == 0files = os.listdir(path)for f in files:self.assertIsNone(re.search('[:\>\</\\\|\?\*]' f))10869304,<python><vim><subprocess>,p = subprocess.Popen(cmd shell=True stdout=subprocess.PIPE stderr=subprocess.PIPE)communicate() stdout stderr ,1
cyverse_repos/beats/libbeat/tests/system/test_dashboard.py,assert_used,print(command)p = subprocess.Popen(command shell=True stdout=subprocess.PIPE stderr=subprocess.PIPE)content err = p.communicate()assert p.returncode == 0files = os.listdir(path)for f in files:self.assertIsNone(re.search('[:\>\</\\\|\?\*]' f))14438845,<python><subprocess>,def run_command(command): p = subprocess.Popen(command shell=True stdout=subprocess.PIPE stderr=subprocess.STDOUT) return p.communicate(),1
cyverse_repos/beats/libbeat/tests/system/test_dashboard.py,assert_used,print(command)p = subprocess.Popen(command shell=True stdout=subprocess.PIPE stderr=subprocess.PIPE)content err = p.communicate()assert p.returncode == 0files = os.listdir(path)for f in files:self.assertIsNone(re.search('[:\>\</\\\|\?\*]' f))18136651,<python>,"proc = subprocess.Popen(""ls -z"" shell=True stdout=subprocess.PIPE stderr=subprocess.PIPE) out err = proc.communicate() assert proc.returncode == 0 'i am sad' print out print err",1
cyverse_repos/ansible/lib/ansible/plugins/connection/jail.py,subprocess_without_shell_equals_true,stdout stderr = p.communicate()return stdout.split()def get_jail_path(self):p = subprocess.Popen([self.jls_cmd '-j' to_bytes(self.jail) '-q' 'path'] stdin=subprocess.PIPE stdout=subprocess.PIPE stderr=subprocess.PIPE)stdout stderr = p.communicate()# remove \n26694464,<python><windows><subprocess><popen>,C:\&gt; subprocess.call([program file])p = subprocess.Popen([program file] stdout=subprocess.PIPE stderr=subprocess.PIPE) stdout stderr = p.communicate() print stdout,1
cyverse_repos/ansible/lib/ansible/plugins/connection/jail.py,subprocess_without_shell_equals_true,stdout stderr = p.communicate()return stdout.split()def get_jail_path(self):p = subprocess.Popen([self.jls_cmd '-j' to_bytes(self.jail) '-q' 'path'] stdin=subprocess.PIPE stdout=subprocess.PIPE stderr=subprocess.PIPE)stdout stderr = p.communicate()# remove \n49543605,<python><subprocess>,"fdisk command = ['sudo' 'fdisk' '/dev/xvdm'] p = subprocess.Popen(command stdin=subprocess.PIPEstdout=subprocess.PIPEstderr=subprocess.PIPE) output err = p.communicate(b""o\nn\np\n1\n\n\nw"")",1
cyverse_repos/ansible/lib/ansible/plugins/connection/jail.py,subprocess_without_shell_equals_true,stdout stderr = p.communicate()return stdout.split()def get_jail_path(self):p = subprocess.Popen([self.jls_cmd '-j' to_bytes(self.jail) '-q' 'path'] stdin=subprocess.PIPE stdout=subprocess.PIPE stderr=subprocess.PIPE)stdout stderr = p.communicate()# remove \n42452033,<python><bash><subprocess><stdin><biopython>,muscle (out err) = subprocess.Popen(['muscle'] stdin=subprocess.PIPE stdout=subprocess.PIPE stderr=subprocess.PIPE).communicate(temp_align) print out,1
cyverse_repos/docker-builds/bowtiebatch/1.0/scripts/bowtie_batch.py,subprocess_popen_with_shell_equals_true,def execute(command logfile):logfile.write('Executing {}'.format(command) + os.linesep)process = subprocess.Popen(command stdin=subprocess.PIPE stdout=subprocess.PIPE stderr=subprocess.PIPE shell=True)(stdout stderr) = process.communicate()logfile.write(stderr + os.linesep)49543605,<python><subprocess>,"fdisk command = ['sudo' 'fdisk' '/dev/xvdm'] p = subprocess.Popen(command stdin=subprocess.PIPEstdout=subprocess.PIPEstderr=subprocess.PIPE) output err = p.communicate(b""o\nn\np\n1\n\n\nw"")",0
cyverse_repos/docker-builds/Read2RefMapper/scripts/Read2ReferenceMapper.py,subprocess_popen_with_shell_equals_true,def execute(command logfile):logfile.write('Executing {}'.format(command))process = subprocess.Popen(command stdin=subprocess.PIPE stdout=subprocess.PIPE stderr=subprocess.PIPE shell=True)(stdout stderr) = process.communicate()return stdout stderr14366352,<java><python>,def wrapper(*args): process = Popen(list(args) stdout=subprocess.PIPE stderr=subprocess.PIPE) stdout stderr = process.communicate() return stdout stderrstdout stderr process ,0
cyverse_repos/docker-builds/Read2RefMapper/scripts/Read2ReferenceMapper.py,subprocess_popen_with_shell_equals_true,def execute(command logfile):logfile.write('Executing {}'.format(command))process = subprocess.Popen(command stdin=subprocess.PIPE stdout=subprocess.PIPE stderr=subprocess.PIPE shell=True)(stdout stderr) = process.communicate()return stdout stderr19884168,<python><command-line><bc>,"p = subprocess.Popen(""bc"" stdin=subprocess.PIPE stdout=subprocess.PIPE stderr=subprocess.PIPE) out err = p.communicate('1+1\n')",0
cyverse_repos/docker-builds/Read2RefMapper/scripts/Read2ReferenceMapper.py,subprocess_popen_with_shell_equals_true,def execute(command logfile):logfile.write('Executing {}'.format(command))process = subprocess.Popen(command stdin=subprocess.PIPE stdout=subprocess.PIPE stderr=subprocess.PIPE shell=True)(stdout stderr) = process.communicate()return stdout stderr23191228,<python>,if cmd: proc = subprocess.Popen(cmd stdout=subprocess.PIPE stderr=subprocess.PIPE shell=True) result = proc.communicate()[0] print result,0
cyverse_repos/ansible/lib/ansible/utils/cmd_functions.py,subprocess_without_shell_equals_true,def run_cmd(cmd live=False readsize=10):#readsize = 10cmdargs = shlex.split(cmd)p = subprocess.Popen(cmdargs stdout=subprocess.PIPE stderr=subprocess.PIPE)stdout = ''stderr = ''rpipes = [p.stdout p.stderr]while True:14366352,<java><python>,def wrapper(*args): process = Popen(list(args) stdout=subprocess.PIPE stderr=subprocess.PIPE) stdout stderr = process.communicate() return stdout stderrstdout stderr process ,0
cyverse_repos/ansible/lib/ansible/plugins/connection/jail.py,subprocess_without_shell_equals_true,if not cmd:raise AnsibleError(%s command not found in PATH % executable)return cmddef list_jails(self):p = subprocess.Popen([self.jls_cmd '-q' 'name'] stdin=subprocess.PIPE stdout=subprocess.PIPE stderr=subprocess.PIPE)stdout stderr = p.communicate()49543605,<python><subprocess>,"fdisk command = ['sudo' 'fdisk' '/dev/xvdm'] p = subprocess.Popen(command stdin=subprocess.PIPEstdout=subprocess.PIPEstderr=subprocess.PIPE) output err = p.communicate(b""o\nn\np\n1\n\n\nw"")",0
cyverse_repos/beats/libbeat/tests/system/test_dashboard.py,assert_used,print(command)p = subprocess.Popen(command shell=True stdout=subprocess.PIPE stderr=subprocess.PIPE)content err = p.communicate()assert p.returncode == 0files = os.listdir(path)for f in files:self.assertIsNone(re.search('[:\>\</\\\|\?\*]' f))10659546,<python>,import subprocessp = subprocess.Popen(['a.out'] stdin=subprocess.PIPE) p.communicate('1 \n 3 \n 2 \n 5 \n 2...\n')import subprocess subprocess.call(['a.out'] stdin=file('a.inp')),0
cyverse_repos/beats/libbeat/tests/system/test_dashboard.py,assert_used,print(command)p = subprocess.Popen(command shell=True stdout=subprocess.PIPE stderr=subprocess.PIPE)content err = p.communicate()assert p.returncode == 0files = os.listdir(path)for f in files:self.assertIsNone(re.search('[:\>\</\\\|\?\*]' f))14223062,<python><mercurial><popen>,p = Popen(['hg' 'verify' '-R' 'natrium-master' '-q'] stdout=PIPE stdin=PIPE) out err = p.communicate() print p.returncode,0
cyverse_repos/beats/libbeat/tests/system/test_dashboard.py,assert_used,print(command)p = subprocess.Popen(command shell=True stdout=subprocess.PIPE stderr=subprocess.PIPE)content err = p.communicate()assert p.returncode == 0files = os.listdir(path)for f in files:self.assertIsNone(re.search('[:\>\</\\\|\?\*]' f))14282095,<python><macos><subprocess><popen>,"[""fastq_quality_trimmer"" ""-Q"" ""33"" ""-v"" ""-t"" ""50"" ""-l"" ""20"" ""-i"" leftInitial ""-o"" leftTrimmed]""33"" ""-v"" -Q 33-v -Q 33 -v &gt;&gt;&gt; ""33"" ""-v"" ('33' '-v') &gt;&gt;&gt; ""33"" ""-v"" '33-v'-v fastq_quality_trimmer args ['echo'] proc = subprocess.Popen(['echo'] + args stdout=subprocess.PIPE stderr=subprocess.PIPE) output err = proc.communicate() print(output)",0
cyverse_repos/beats/libbeat/tests/system/test_dashboard.py,assert_used,print(command)p = subprocess.Popen(command shell=True stdout=subprocess.PIPE stderr=subprocess.PIPE)content err = p.communicate()assert p.returncode == 0files = os.listdir(path)for f in files:self.assertIsNone(re.search('[:\>\</\\\|\?\*]' f))14322547,<python><stdout><stderr>,stderr = subprocess.PIPE p = subprocess.Popen(...stderr = subprocess.PIPE) stdoutstderr = p.communicate() #p.stderr.read() could work too.Popen subprocess.call subprocess.Popen ,0
cyverse_repos/beats/libbeat/tests/system/test_dashboard.py,assert_used,print(command)p = subprocess.Popen(command shell=True stdout=subprocess.PIPE stderr=subprocess.PIPE)content err = p.communicate()assert p.returncode == 0files = os.listdir(path)for f in files:self.assertIsNone(re.search('[:\>\</\\\|\?\*]' f))14366352,<java><python>,def wrapper(*args): process = Popen(list(args) stdout=subprocess.PIPE stderr=subprocess.PIPE) stdout stderr = process.communicate() return stdout stderrstdout stderr process ,0
cyverse_repos/beats/libbeat/tests/system/test_dashboard.py,assert_used,print(command)p = subprocess.Popen(command shell=True stdout=subprocess.PIPE stderr=subprocess.PIPE)content err = p.communicate()assert p.returncode == 0files = os.listdir(path)for f in files:self.assertIsNone(re.search('[:\>\</\\\|\?\*]' f))14409849,<python><shell><unix><filesystems>,subprocess import sys import subprocessfname = sys.argv[1] proc = subprocess.Popen(['sort' fname] stdout=subprocess.PIPE) stdout _ = proc.communicate() with open(fname 'w') as f: f.write(stdout),0
cyverse_repos/beats/libbeat/tests/system/test_dashboard.py,assert_used,print(command)p = subprocess.Popen(command shell=True stdout=subprocess.PIPE stderr=subprocess.PIPE)content err = p.communicate()assert p.returncode == 0files = os.listdir(path)for f in files:self.assertIsNone(re.search('[:\>\</\\\|\?\*]' f))16990396,<python><bash>,"command = [""somecommand"" test] subprocess.Popen(command stdout=subprocess.PIPE)test subprocess.Popen() ",0
cyverse_repos/beats/libbeat/tests/system/test_dashboard.py,assert_used,print(command)p = subprocess.Popen(command shell=True stdout=subprocess.PIPE stderr=subprocess.PIPE)content err = p.communicate()assert p.returncode == 0files = os.listdir(path)for f in files:self.assertIsNone(re.search('[:\>\</\\\|\?\*]' f))17159057,<android><python><scripting><automation><cts>,"cts_tradefed_script = ""./android-cts/tools/cts-tradefed"" process = subprocess.Popen([cts_tradefed_script + "" "" + serialno] shell=True stdout=subprocess.PIPE stderr=subprocess.STDOUT)",0
cyverse_repos/beats/libbeat/tests/system/test_dashboard.py,assert_used,print(command)p = subprocess.Popen(command shell=True stdout=subprocess.PIPE stderr=subprocess.PIPE)content err = p.communicate()assert p.returncode == 0files = os.listdir(path)for f in files:self.assertIsNone(re.search('[:\>\</\\\|\?\*]' f))17742789,<python><bash><subprocess>,def subprocess_cmd(command): process = subprocess.Popen(commandstdout=subprocess.PIPE shell=True) proc_stdout = process.communicate()[0].strip() print proc_stdoutsubprocess_cmd('echo a; echo b')a b,0
cyverse_repos/beats/libbeat/tests/system/test_dashboard.py,assert_used,print(command)p = subprocess.Popen(command shell=True stdout=subprocess.PIPE stderr=subprocess.PIPE)content err = p.communicate()assert p.returncode == 0files = os.listdir(path)for f in files:self.assertIsNone(re.search('[:\>\</\\\|\?\*]' f))17749525,<python><selenium><selenium-webdriver><subprocess>,"proc =subprocess.Popen( [""python""path + ""/pythonChild.py""] preexec_fn=os.setsid stdout=subprocess.PIPE stdin=subprocess.PIPE) os.killpg( proc.pid 9 )",0
cyverse_repos/beats/libbeat/tests/system/test_dashboard.py,assert_used,print(command)p = subprocess.Popen(command shell=True stdout=subprocess.PIPE stderr=subprocess.PIPE)content err = p.communicate()assert p.returncode == 0files = os.listdir(path)for f in files:self.assertIsNone(re.search('[:\>\</\\\|\?\*]' f))18046499,<python><process><pipe>,"subprocess.Popen .call Popen subprocess.PIPE stdin import subprocess proc = subprocess.Popen('shell command' stdin=subprocess.PIPE) proc.stdin.write(""my data"")",0
cyverse_repos/ansible/lib/ansible/plugins/connection/jail.py,subprocess_without_shell_equals_true,stdout stderr = p.communicate()return stdout.split()def get_jail_path(self):p = subprocess.Popen([self.jls_cmd '-j' to_bytes(self.jail) '-q' 'path'] stdin=subprocess.PIPE stdout=subprocess.PIPE stderr=subprocess.PIPE)stdout stderr = p.communicate()# remove \n37815163,<python><cross-platform><warnings><compatibility><popen>,atexit import atexit devnull = open(os.devnull 'w') atexit.register(devnull.close) subprocess.Popen(args stdout=devnull),0
cyverse_repos/ansible/lib/ansible/plugins/connection/jail.py,subprocess_without_shell_equals_true,stdout stderr = p.communicate()return stdout.split()def get_jail_path(self):p = subprocess.Popen([self.jls_cmd '-j' to_bytes(self.jail) '-q' 'path'] stdin=subprocess.PIPE stdout=subprocess.PIPE stderr=subprocess.PIPE)stdout stderr = p.communicate()# remove \n39512186,<python><python-2.7>,cmd = ['dmesg'] with open ('dmesg_log.txt' 'w') as out1: retun1 = subprocess.Popen(cmd shell = True stdout=out1),0
cyverse_repos/ansible/lib/ansible/plugins/connection/jail.py,subprocess_without_shell_equals_true,stdout stderr = p.communicate()return stdout.split()def get_jail_path(self):p = subprocess.Popen([self.jls_cmd '-j' to_bytes(self.jail) '-q' 'path'] stdin=subprocess.PIPE stdout=subprocess.PIPE stderr=subprocess.PIPE)stdout stderr = p.communicate()# remove \n8440565,<python><multithreading><popen>,def run(self): if self.command is not None: self.process = Popen( self.command.split() shell=False stdout=PIPE stderr=PIPE)def stop(self): if self.process is not None: self.process.terminate(),0
cyverse_repos/ansible/lib/ansible/plugins/connection/jail.py,subprocess_without_shell_equals_true,stdout stderr = p.communicate()return stdout.split()def get_jail_path(self):p = subprocess.Popen([self.jls_cmd '-j' to_bytes(self.jail) '-q' 'path'] stdin=subprocess.PIPE stdout=subprocess.PIPE stderr=subprocess.PIPE)stdout stderr = p.communicate()# remove \n49018413,<python><python-3.x><subprocess>,"dir cmd.exe powershell.exe subprocess.Popen([""cmd"" ""/c"" ""dir"" ""c:\\Users""] stdout=subprocess.PIPE)C:\&gt;cmd /c dir c:\Userscmd c:\\Windows\\System32\\cmd.exe ",0
cyverse_repos/ansible/lib/ansible/plugins/connection/jail.py,subprocess_without_shell_equals_true,stdout stderr = p.communicate()return stdout.split()def get_jail_path(self):p = subprocess.Popen([self.jls_cmd '-j' to_bytes(self.jail) '-q' 'path'] stdin=subprocess.PIPE stdout=subprocess.PIPE stderr=subprocess.PIPE)stdout stderr = p.communicate()# remove \n19884168,<python><command-line><bc>,"p = subprocess.Popen(""bc"" stdin=subprocess.PIPE stdout=subprocess.PIPE stderr=subprocess.PIPE) out err = p.communicate('1+1\n')",0
cyverse_repos/ansible/lib/ansible/plugins/connection/jail.py,subprocess_without_shell_equals_true,stdout stderr = p.communicate()return stdout.split()def get_jail_path(self):p = subprocess.Popen([self.jls_cmd '-j' to_bytes(self.jail) '-q' 'path'] stdin=subprocess.PIPE stdout=subprocess.PIPE stderr=subprocess.PIPE)stdout stderr = p.communicate()# remove \n42936606,<python><unit-testing><mocking>,Popen with patch('subprocess.Popen' mock_popen):Popen from subprocess import Popen PIPEwith patch('myapp.mymodule.Popen' mock_popen):,0
cyverse_repos/ansible/lib/ansible/plugins/connection/jail.py,subprocess_without_shell_equals_true,stdout stderr = p.communicate()return stdout.split()def get_jail_path(self):p = subprocess.Popen([self.jls_cmd '-j' to_bytes(self.jail) '-q' 'path'] stdin=subprocess.PIPE stdout=subprocess.PIPE stderr=subprocess.PIPE)stdout stderr = p.communicate()# remove \n2561902,<python><subprocess>,"subprocess.call() subprocess.call() wait() wait() communicate() p = subprocess.Popen( [""scanx"" ""--udp"" host] stdin=subprocess.PIPE stdout=subprocess.PIPE stderr=subprocess.PIPE) out err = p.communicate()",0
cyverse_repos/ansible/lib/ansible/plugins/connection/jail.py,subprocess_without_shell_equals_true,stdout stderr = p.communicate()return stdout.split()def get_jail_path(self):p = subprocess.Popen([self.jls_cmd '-j' to_bytes(self.jail) '-q' 'path'] stdin=subprocess.PIPE stdout=subprocess.PIPE stderr=subprocess.PIPE)stdout stderr = p.communicate()# remove \n29464145,<java><python><subprocess>,subprocess.call() subprocess.Popen() subprocess.Popen() time.sleep(0.5) ,0
cyverse_repos/ansible/lib/ansible/plugins/connection/jail.py,subprocess_without_shell_equals_true,stdout stderr = p.communicate()return stdout.split()def get_jail_path(self):p = subprocess.Popen([self.jls_cmd '-j' to_bytes(self.jail) '-q' 'path'] stdin=subprocess.PIPE stdout=subprocess.PIPE stderr=subprocess.PIPE)stdout stderr = p.communicate()# remove \n43214518,<python><bash>,subprocess.Popen stdout subprocess.check_output([arg0 arg1 ...] encoding='utf-8')stderr=subprocess.STDOUT subprocess.check_output ,0
cyverse_repos/ansible/lib/ansible/plugins/connection/jail.py,subprocess_without_shell_equals_true,stdout stderr = p.communicate()return stdout.split()def get_jail_path(self):p = subprocess.Popen([self.jls_cmd '-j' to_bytes(self.jail) '-q' 'path'] stdin=subprocess.PIPE stdout=subprocess.PIPE stderr=subprocess.PIPE)stdout stderr = p.communicate()# remove \n12201107,<python><cmd><executable>,"subprocess.Popen([""/bin/ls"" ""-l""]subprocess.call subprocess.call_check ",0
cyverse_repos/ansible/lib/ansible/plugins/connection/jail.py,subprocess_without_shell_equals_true,stdout stderr = p.communicate()return stdout.split()def get_jail_path(self):p = subprocess.Popen([self.jls_cmd '-j' to_bytes(self.jail) '-q' 'path'] stdin=subprocess.PIPE stdout=subprocess.PIPE stderr=subprocess.PIPE)stdout stderr = p.communicate()# remove \n20511672,<python>,"TypeError subprocess.Popen(""python"" ""Desktop/gold/gold.py"") subprocess.Popen(""python Desktop/gold/gold.py"")args subprocess.Popen(""python Desktop/gold/gold.py"" shell = True)",0
cyverse_repos/irods/iRODS/server/re/src/utils.cpp,cert-MSC24-C,/** debuggging functions **/int writeToTmp( char *fileName char *text ) {char buf[1024];snprintf( buf sizeof( buf ) /tmp/%s fileName );FILE *fp = fopen( buf a );if ( fp == NULL ) {return 0;}fputs( text fp );fclose( fp );4182876,<c>,"#include &lt;stdio.h&gt;void adx_store_data(const char *filepath const char *data) { FILE *fp = fopen(filepath ""ab""); if (fp != NULL) { fputs(data fp); fclose(fp); } }",1
cyverse_repos/irods-legacy/iRODS/server/re/src/utils.c,cert-MSC24-C,/** debuggging functions **/int writeToTmp(char *fileName char *text) {char buf[1024];strcpy(buf /tmp/);strcat(buf fileName);FILE *fp = fopen(buf a);if(fp==NULL) {return 0;}fputs(text fp);fclose(fp);4182876,<c>,"#include &lt;stdio.h&gt;void adx_store_data(const char *filepath const char *data) { FILE *fp = fopen(filepath ""ab""); if (fp != NULL) { fputs(data fp); fclose(fp); } }",1
cyverse_repos/irods-legacy/iRODS/server/re/src/utils.c,cert-MSC24-C,/** debuggging functions **/int writeToTmp(char *fileName char *text) {char buf[1024];strcpy(buf /tmp/);strcat(buf fileName);FILE *fp = fopen(buf a);if(fp==NULL) {return 0;}fputs(text fp);fclose(fp);47811219,<c><fopen>,"char path[strlen(dictionary) + 3]; strcat(path ""./"");path strcat strcpy char path[strlen(dictionary) + 3]; strcpy(path ""./"");fopen() errno perror() ",1
cyverse_repos/irods-legacy/iRODS/server/re/src/utils.c,cert-MSC24-C,/** debuggging functions **/int writeToTmp(char *fileName char *text) {char buf[1024];strcpy(buf /tmp/);strcat(buf fileName);FILE *fp = fopen(buf a);if(fp==NULL) {return 0;}fputs(text fp);fclose(fp);53813815,<c>,"entry-&gt;d_name char fullname[1024]; strcpy(fullnames); strcat(fullname""\\""); strcat(fullnameentry-&gt;d_name); ff = fopen(fullname ""r"");",1
cyverse_repos/irods-legacy/iRODS/lib/rbudp/src/QUANTAnet_rbudpReceiver_c.c,cert-MSC24-C,}intgetfilelist(rbudpReceiver_t *rbudpReceiver char * fileList int packetSize){FILE *fp = fopen(fileList r);if (fp == NULL) {fprintf(stderrError open file!\n);return -1;}60508833,<c><system-calls><errno>,"errno perror errno fopen NULL perror FILE *fd = fopen(""nothing"" ""r""); if (fd == NULL) { perror(""fopen failed""); }",1
cyverse_repos/irods-legacy/iRODS/server/test/s3/irodss3/src/gets3.c,cert-MSC24-C,return(-1);}*key = '\0';key++;fd = fopen(fileName w );if (fd == NULL) {printf(Unable to open output file);return(-1);}15228627,<c><file><pointers><global>,"fopen() in_fp = fopen(SOURCE_CODE ""r""); if(in_fp == NULL) { perror(""Failed to open the source""); return EXIT_FAILURE; }",1
cyverse_repos/irods-legacy/iRODS/server/test/s3/irodss3/src/gets3.c,cert-MSC24-C,return(-1);}*key = '\0';key++;fd = fopen(fileName w );if (fd == NULL) {printf(Unable to open output file);return(-1);}54365482,<c>,"s char s[100];char *s;fopen in = fopen(""input"" ""r""); if (in == NULL) { printf(""Can't open file\n""); exit(1); }",1
cyverse_repos/irods/iRODS/server/re/src/utils.cpp,cert-MSC24-C,/** debuggging functions **/int writeToTmp( char *fileName char *text ) {char buf[1024];snprintf( buf sizeof( buf ) /tmp/%s fileName );FILE *fp = fopen( buf a );if ( fp == NULL ) {return 0;}fputs( text fp );fclose( fp );42638242,<c><file><absolute-path>,"char filepath1[SIZE] = {0};scanf(""%s"" filepath1);FILE * fdw = fopen(filepath1 ""a"");",0
cyverse_repos/irods/iRODS/server/re/src/utils.cpp,cert-MSC24-C,/** debuggging functions **/int writeToTmp( char *fileName char *text ) {char buf[1024];snprintf( buf sizeof( buf ) /tmp/%s fileName );FILE *fp = fopen( buf a );if ( fp == NULL ) {return 0;}fputs( text fp );fclose( fp );42688719,<c><linux><printf><fopen><ping>,"sprintf(cmdBuf ""ping -c5 -W1 %s &gt;&gt; %s"" dst_addr FILE_NAME ); fp = fopen(FILE_NAME ""w""); fprintf(fp""ping -c5 -W1 %s\n"" dst_addr); fclose(fp); doSystem(cmdBuf);",0
cyverse_repos/irods/iRODS/server/re/src/utils.cpp,cert-MSC24-C,/** debuggging functions **/int writeToTmp( char *fileName char *text ) {char buf[1024];snprintf( buf sizeof( buf ) /tmp/%s fileName );FILE *fp = fopen( buf a );if ( fp == NULL ) {return 0;}fputs( text fp );fclose( fp );42876210,<c><fopen>,"fopen fopen(path ""r"") fopen(path ""r+"") path bool isDirectory(const char* path) { FILE *f = fopen(path ""r+""); if (f) { fclose(f); return false; } return errno == EISDIR; }",0
cyverse_repos/irods/iRODS/server/re/src/utils.cpp,cert-MSC24-C,/** debuggging functions **/int writeToTmp( char *fileName char *text ) {char buf[1024];snprintf( buf sizeof( buf ) /tmp/%s fileName );FILE *fp = fopen( buf a );if ( fp == NULL ) {return 0;}fputs( text fp );fclose( fp );44923385,<c++><fstream>,"long long filesize(const char *fname) {int ch;FILE *fp;long long answer = 0;fp = fopen(fname ""rb"");if(!fp)return -1;while( (ch = fgetc(fp)) != EOF) answer++;fclose(fp);return answer; }",0
cyverse_repos/irods-legacy/iRODS/server/re/src/utils.c,cert-MSC24-C,/** debuggging functions **/int writeToTmp(char *fileName char *text) {char buf[1024];strcpy(buf /tmp/);strcat(buf fileName);FILE *fp = fopen(buf a);if(fp==NULL) {return 0;}fputs(text fp);fclose(fp);42638242,<c><file><absolute-path>,"char filepath1[SIZE] = {0};scanf(""%s"" filepath1);FILE * fdw = fopen(filepath1 ""a"");",0
cyverse_repos/irods-legacy/iRODS/server/re/src/utils.c,cert-MSC24-C,/** debuggging functions **/int writeToTmp(char *fileName char *text) {char buf[1024];strcpy(buf /tmp/);strcat(buf fileName);FILE *fp = fopen(buf a);if(fp==NULL) {return 0;}fputs(text fp);fclose(fp);44923385,<c++><fstream>,"long long filesize(const char *fname) {int ch;FILE *fp;long long answer = 0;fp = fopen(fname ""rb"");if(!fp)return -1;while( (ch = fgetc(fp)) != EOF) answer++;fclose(fp);return answer; }",0
cyverse_repos/irods-legacy/iRODS/server/re/src/utils.c,cert-MSC24-C,/** debuggging functions **/int writeToTmp(char *fileName char *text) {char buf[1024];strcpy(buf /tmp/);strcat(buf fileName);FILE *fp = fopen(buf a);if(fp==NULL) {return 0;}fputs(text fp);fclose(fp);50428327,<c><fopen><fwrite><fseek>,"""r+"" ""a+"" b #include &lt;stdlib.h&gt; #include &lt;stdio.h&gt;int main(void){ FILE *fp = fopen(""file.txt"" ""r+""); fseek(fp 10 SEEK_SET); fwrite(""ABCD"" 1 4 fp); fclose(fp);return 0; }",0
cyverse_repos/irods-legacy/iRODS/server/re/src/utils.c,cert-MSC24-C,/** debuggging functions **/int writeToTmp(char *fileName char *text) {char buf[1024];strcpy(buf /tmp/);strcat(buf fileName);FILE *fp = fopen(buf a);if(fp==NULL) {return 0;}fputs(text fp);fclose(fp);5138739,<c++><exception><error-handling><try-catch>,catch FILE *safe_fopen(char const *path char const *mode) { FILE *f = std::fopen(path mode); if (f == NULL) throw std::runtime_error(std::strerror(errno)); return f; },0
cyverse_repos/irods-legacy/iRODS/server/re/src/utils.c,cert-MSC24-C,/** debuggging functions **/int writeToTmp(char *fileName char *text) {char buf[1024];strcpy(buf /tmp/);strcat(buf fileName);FILE *fp = fopen(buf a);if(fp==NULL) {return 0;}fputs(text fp);fclose(fp);5379463,<c><macros><return>,void nullCheck(FILE* checkVar){ if(checkVar==NULL){ } }int readFile(char* _name char* storeArray) { FILE* fp; fp=fopen(_nameREAD_ONLY_MODE); nullCheck(fp); return -1; return 1; },0
cyverse_repos/irods-legacy/iRODS/server/re/src/utils.c,cert-MSC24-C,/** debuggging functions **/int writeToTmp(char *fileName char *text) {char buf[1024];strcpy(buf /tmp/);strcat(buf fileName);FILE *fp = fopen(buf a);if(fp==NULL) {return 0;}fputs(text fp);fclose(fp);54782308,<c><linux><linux-kernel><kernel>,"fopen(""/proc/cpuinfo | grep 'model name' "" ""r""); /proc/cpuinfo | grep 'model name' FILE * fp = popen(""grep 'model name'/proc/cpuinfo"" ""r"");if (fp != NULL) { ...read inpclose(fp); }",0
cyverse_repos/irods-legacy/iRODS/server/re/src/utils.c,cert-MSC24-C,/** debuggging functions **/int writeToTmp(char *fileName char *text) {char buf[1024];strcpy(buf /tmp/);strcat(buf fileName);FILE *fp = fopen(buf a);if(fp==NULL) {return 0;}fputs(text fp);fclose(fp);56568159,<c><file><fread>,"""/path/to/myfiles/program1.ijvm"" fopen \\Open read-only fp = fopen(binary ""rb""); if(fp==NULL){ perror(""problem opening the file""); exit(EXIT_FAILURE); } ",0
cyverse_repos/irods-legacy/iRODS/server/re/src/utils.c,cert-MSC24-C,/** debuggging functions **/int writeToTmp(char *fileName char *text) {char buf[1024];strcpy(buf /tmp/);strcat(buf fileName);FILE *fp = fopen(buf a);if(fp==NULL) {return 0;}fputs(text fp);fclose(fp);59237858,<c><multithreading>,flockfp = fopen(fileName fileMode);if (fp != NULL) {flock(fileno(fp) LOCK_EX);...fclose(fp); fp = NULL;},0
cyverse_repos/irods-legacy/iRODS/lib/rbudp/src/QUANTAnet_rbudpReceiver_c.c,cert-MSC24-C,}intgetfilelist(rbudpReceiver_t *rbudpReceiver char * fileList int packetSize){FILE *fp = fopen(fileList r);if (fp == NULL) {fprintf(stderrError open file!\n);return -1;}62049743,<c><system-calls><errno><unistd.h><strerror>,"perror() fopen() errno == 0 Success fopen() NULL if (fopen(""."") == NULL) { printf(""main: %s \n"" strerror(errno)); }. . perror() ",0
cyverse_repos/irods-legacy/iRODS/lib/rbudp/src/QUANTAnet_rbudpReceiver_c.c,cert-MSC24-C,}intgetfilelist(rbudpReceiver_t *rbudpReceiver char * fileList int packetSize){FILE *fp = fopen(fileList r);if (fp == NULL) {fprintf(stderrError open file!\n);return -1;}6207302,<c><binary>,"CR NL 0x0D 0x0A NL 0x0A FILE *input_file = fopen(filename ""r"");FILE *input_file = fopen(filename ""rb"");fread() CR NL NL NL CR NL ftell() ",0
cyverse_repos/irods-legacy/iRODS/lib/rbudp/src/QUANTAnet_rbudpReceiver_c.c,cert-MSC24-C,}intgetfilelist(rbudpReceiver_t *rbudpReceiver char * fileList int packetSize){FILE *fp = fopen(fileList r);if (fp == NULL) {fprintf(stderrError open file!\n);return -1;}62152677,<c><loops><file>," char filename[2000];for (int i = 0; i &lt; 10; ++i) { snprintf(filename sizeof(filename) ""Desktop\\filename\\data_%d"" i); FILE *f = fopen(filename ""w""); if (f != NULL) {fclose(f); }}",0
cyverse_repos/irods-legacy/iRODS/lib/rbudp/src/QUANTAnet_rbudpReceiver_c.c,cert-MSC24-C,}intgetfilelist(rbudpReceiver_t *rbudpReceiver char * fileList int packetSize){FILE *fp = fopen(fileList r);if (fp == NULL) {fprintf(stderrError open file!\n);return -1;}62394620,<c>,"int main(int argc char *argv[]) { FILE *fp;if (argc != 2){ printf(""Usage: %s &lt;filename&gt;\n"" argv[0]); return 1; }fp = fopen(argv[1] ""r"");// the rest of your program...return 0; }",0
cyverse_repos/irods-legacy/iRODS/server/test/s3/irodss3/src/gets3.c,cert-MSC24-C,return(-1);}*key = '\0';key++;fd = fopen(fileName w );if (fd == NULL) {printf(Unable to open output file);return(-1);}15331426,<c><fread>,"open FILE * fopen fp = fopen(""/dev/urandom"" ""r"");(void *) test.txt /dev/urandom creat() open(2) ",0
cyverse_repos/irods-legacy/iRODS/server/test/s3/irodss3/src/gets3.c,cert-MSC24-C,return(-1);}*key = '\0';key++;fd = fopen(fileName w );if (fd == NULL) {printf(Unable to open output file);return(-1);}15620717,<c><fopen>,"FILE *fp1 *fp2;fp1 = fopen(""file"" ""r""); fp2 = fopen(""file"" ""r"");fp1 fp2 ",0
cyverse_repos/irods-legacy/iRODS/server/test/s3/irodss3/src/gets3.c,cert-MSC24-C,return(-1);}*key = '\0';key++;fd = fopen(fileName w );if (fd == NULL) {printf(Unable to open output file);return(-1);}15710654,<c><input><buffer><fgets>,"if ( file=fopen(filename ""r"") == NULL )if ( (file=fopen(filename ""r"")) == NULL )file = 0 file = 1 ",0
cyverse_repos/irods-legacy/iRODS/server/test/s3/irodss3/src/gets3.c,cert-MSC24-C,return(-1);}*key = '\0';key++;fd = fopen(fileName w );if (fd == NULL) {printf(Unable to open output file);return(-1);}15751030,<c><udp><file-transfer>,"FILE* fd = fopen(""fooo.txt""""w"");fwrite(tempString 1 256 fd);fread(tempString1256 fd)",0
cyverse_repos/irods-legacy/iRODS/server/test/s3/irodss3/src/gets3.c,cert-MSC24-C,return(-1);}*key = '\0';key++;fd = fopen(fileName w );if (fd == NULL) {printf(Unable to open output file);return(-1);}55188468,<c><text><printing><character>,"\r\n \n \r \r \r \n fopen(filename ""r"") fopen(filename ""rb"") ",0
cyverse_repos/irods-legacy/iRODS/server/test/s3/irodss3/src/gets3.c,cert-MSC24-C,return(-1);}*key = '\0';key++;fd = fopen(fileName w );if (fd == NULL) {printf(Unable to open output file);return(-1);}56072251,<c><linux><signals>,"fflush(fp) fprintf(fp ...) setvbuf fp = fopen(FILE_NAME ""w+""); setvbuf(fp NULL _IOLBF BUFSIZ);tail -f &lt;logfile&gt; ",0
cyverse_repos/irods-legacy/iRODS/server/test/s3/irodss3/src/gets3.c,cert-MSC24-C,return(-1);}*key = '\0';key++;fd = fopen(fileName w );if (fd == NULL) {printf(Unable to open output file);return(-1);}56192596,<c><huffman-code>,"int fputc(int FILE*) fp = fopen(""filename"" ""wb+""); fwrite(buffer 4 1 fp);int fprintf(FILE* format ....); ",0
cyverse_repos/irods-legacy/iRODS/server/test/s3/irodss3/src/gets3.c,cert-MSC24-C,return(-1);}*key = '\0';key++;fd = fopen(fileName w );if (fd == NULL) {printf(Unable to open output file);return(-1);}5630067,<c>,"FILE *file = fopen(filename ""r"") fgets(line 100 file) free() fgets() char filename[] FILE* fopen() ",0
cyverse_repos/irods-legacy/iRODS/clients/icommands/src/ixmsg.c,cert-MSC24-C,}while ((opt = getopt(argc argv ht:n:r:H:M:c:s:)) != (char)EOF) {switch(opt) {case 't':tNum = atoi(optarg);break;case 'n':mNum = atoi(optarg);break;case 'r':49021769,<c><getopt>,"while ((o = getopt(argc argv ""w::"")) != -1) { switch (o) { case 'w' : if (optarg) { w = atoi(optarg); } break;: : optarg NULL ",1
cyverse_repos/irods-legacy/iRODS/clients/icommands/src/idbug.c,cert-MSC24-C,while ((opt = getopt(argc argv cChv:)) != (char)EOF) {switch(opt) {case 'v':verbose = atoi(optarg);break;case 'c':continueAllFlag = 1;break;case 'C':49021769,<c><getopt>,"while ((o = getopt(argc argv ""w::"")) != -1) { switch (o) { case 'w' : if (optarg) { w = atoi(optarg); } break;: : optarg NULL ",1
cyverse_repos/irods-legacy/iRODS/clients/icommands/src/ixmsg.c,cert-MSC24-C,}while ((opt = getopt(argc argv ht:n:r:H:M:c:s:)) != (char)EOF) {switch(opt) {case 't':tNum = atoi(optarg);break;case 'n':mNum = atoi(optarg);break;case 'r':50854980,<c><arrays><pointers>,int c(char **args) {int steps = atoi(args[1]); }atoi ,0
cyverse_repos/irods-legacy/iRODS/clients/icommands/src/ixmsg.c,cert-MSC24-C,}while ((opt = getopt(argc argv ht:n:r:H:M:c:s:)) != (char)EOF) {switch(opt) {case 't':tNum = atoi(optarg);break;case 'n':mNum = atoi(optarg);break;case 'r':5106297,<c++><command-line-arguments>,atoi() int frstNumb = atoi(argv[1]); int scndNumb = atoi(argv[2]);atoi() ,0
cyverse_repos/irods-legacy/iRODS/clients/icommands/src/ixmsg.c,cert-MSC24-C,}while ((opt = getopt(argc argv ht:n:r:H:M:c:s:)) != (char)EOF) {switch(opt) {case 't':tNum = atoi(optarg);break;case 'n':mNum = atoi(optarg);break;case 'r':53723782,<c++><cs50>,argv char * *argv argv[0] argv[1] atoi if(argc != 2) { //print usage return 0; }int key = atoi(argv[1]);strtol atoi ,0
cyverse_repos/irods-legacy/iRODS/clients/icommands/src/ixmsg.c,cert-MSC24-C,}while ((opt = getopt(argc argv ht:n:r:H:M:c:s:)) != (char)EOF) {switch(opt) {case 't':tNum = atoi(optarg);break;case 'n':mNum = atoi(optarg);break;case 'r':56041910,<c><division><inf>,float dt = atoi(args[2])/1000; float dt = atoi(args[2])/1000.0f; ,0
cyverse_repos/irods-legacy/iRODS/clients/icommands/src/idbug.c,cert-MSC24-C,while ((opt = getopt(argc argv cChv:)) != (char)EOF) {switch(opt) {case 'v':verbose = atoi(optarg);break;case 'c':continueAllFlag = 1;break;case 'C':50854980,<c><arrays><pointers>,int c(char **args) {int steps = atoi(args[1]); }atoi ,0
cyverse_repos/irods-legacy/iRODS/clients/icommands/src/idbug.c,cert-MSC24-C,while ((opt = getopt(argc argv cChv:)) != (char)EOF) {switch(opt) {case 'v':verbose = atoi(optarg);break;case 'c':continueAllFlag = 1;break;case 'C':53723782,<c++><cs50>,argv char * *argv argv[0] argv[1] atoi if(argc != 2) { //print usage return 0; }int key = atoi(argv[1]);strtol atoi ,0
cyverse_repos/irods-legacy/iRODS/clients/icommands/src/idbug.c,cert-MSC24-C,while ((opt = getopt(argc argv cChv:)) != (char)EOF) {switch(opt) {case 'v':verbose = atoi(optarg);break;case 'c':continueAllFlag = 1;break;case 'C':58945024,<c><arrays><linux><function><parameter-passing>,if (atoi(argv[i]) &gt; atoi(argv [1])) { /* pass value of argument(s) to array named arr */ arr[j] = atoi(argv[i]); j++; } ,0
cyverse_repos/irods-legacy/iRODS/clients/icommands/src/idbug.c,cert-MSC24-C,while ((opt = getopt(argc argv cChv:)) != (char)EOF) {switch(opt) {case 'v':verbose = atoi(optarg);break;case 'c':continueAllFlag = 1;break;case 'C':61213177,<c>,"int numbers[50]; int i = 0;while(i+1 &lt; argc) { numbers[i] = atoi(argv[i+1]);printf("" %d "" numbers[i]); i++; }argc ",0